version: '3.8'

services:
  ops-server:
    build:
      context: .
      dockerfile: Dockerfile.server
    container_name: ops-server
    ports:
      - "3000:3000"   # HTTP API
      - "12345:12345" # TCP Socket
    environment:
      - RUST_LOG=info
      - OPS_HTTP_BIND_ADDR=0.0.0.0
      - OPS_TCP_BIND_ADDR=0.0.0.0
      - OPS_HTTP_PORT=3000
      - OPS_TCP_PORT=12345
      - OPS_CLEANUP_INTERVAL=60
      - OPS_CLIENT_TIMEOUT=300
      - OPS_MAX_CONNECTIONS=1000
      # 取消注释以启用认证
      # - OPS_AUTH_TOKEN=your-secret-token-here
    networks:
      - ops-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  ops-client-1:
    build:
      context: .
      dockerfile: Dockerfile.client
    container_name: ops-client-1
    environment:
      - RUST_LOG=info
      - OPS_SERVER_HOST=ops-server
      - OPS_SERVER_PORT=12345
      - OPS_HEARTBEAT_INTERVAL=3
      - OPS_RETRY_MAX_ATTEMPTS=10
      - OPS_CLIENT_ID_FILE=/tmp/client_id.txt
      - OPS_APPS_BASE_DIR=/tmp/apps
      - OPS_COMMAND_LOG_FILE=/var/log/ops-client/commands.log
      # 如果服务端启用了认证，取消注释
      # - OPS_AUTH_TOKEN=your-secret-token-here
    volumes:
      - client1_data:/tmp/apps
      - client1_logs:/var/log/ops-client
    networks:
      - ops-network
    depends_on:
      ops-server:
        condition: service_healthy
    restart: unless-stopped

  ops-client-2:
    build:
      context: .
      dockerfile: Dockerfile.client
    container_name: ops-client-2
    environment:
      - RUST_LOG=info
      - OPS_SERVER_HOST=ops-server
      - OPS_SERVER_PORT=12345
      - OPS_HEARTBEAT_INTERVAL=3
      - OPS_RETRY_MAX_ATTEMPTS=10
      - OPS_CLIENT_ID_FILE=/tmp/client_id.txt
      - OPS_APPS_BASE_DIR=/tmp/apps
      - OPS_COMMAND_LOG_FILE=/var/log/ops-client/commands.log
      # 如果服务端启用了认证，取消注释
      # - OPS_AUTH_TOKEN=your-secret-token-here
    volumes:
      - client2_data:/tmp/apps
      - client2_logs:/var/log/ops-client
    networks:
      - ops-network
    depends_on:
      ops-server:
        condition: service_healthy
    restart: unless-stopped

networks:
  ops-network:
    driver: bridge

volumes:
  client1_data:
  client1_logs:
  client2_data:
  client2_logs: